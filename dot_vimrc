" use vim settings rather than vi
" This needs to be first because it changes other options as a side affect
set nocompatible

filetype off

" ========== Load plugins ==========
" set rtp+=~/.vim/bundle/fzf

call plug#begin('~/.vim/plugged')

" Easier key jump
Plug 'easymotion/vim-easymotion'

" Nicer status line
Plug 'vim-airline/vim-airline'

" Fuzzy completion
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'

" Make tab more useful
Plug 'ervandew/supertab'

" Add easier tmux navigation
Plug 'christoomey/vim-tmux-navigator'

" Run tmux commands within vim
Plug 'benmills/vimux'

" NERDTree
Plug 'scrooloose/nerdtree'

" Make tabs align nicely
Plug 'godlygeek/tabular'

" Make paste work nicely and stop auto-indenting
Plug 'ConradIrwin/vim-bracketed-paste'

" Syntax highlighting for wiki
Plug 'chikamichi/mediawiki.vim'

" Syntax highlighting for yaml
Plug 'avakhov/vim-yaml'

" Hex editing with VIM
Plug 'Shougo/vinarise.vim'

" Kotlin highlighting
Plug 'udalov/kotlin-vim'

" Add plugins to &runtimepath
call plug#end()

" Turn on vim's ability to recognize different types of files, and use custom
" highlighters and indentation for them
filetype plugin indent on    " required

" ========== General Config ==========

let spell_auto_type=""              " don't automatically spell check
let mapleader=','                   " change the leader key to be ,
set history=1000                    " set a command history
set hidden                          " allow for buffer to be hidden
set visualbell                      " no sounds
set viminfo^=%                      " remember info about buffers on close
set nowrap                          " turn off word wrap by default (do "set wrap" to turn it on again, or remove this line)
set ignorecase                      " ignores casing by default
set smartcase                       " only respects casing when it's used in searching
set noequalalways                   " don't resize splits when a buffer is closed
set backspace=2                     " use nice backspacing
set incsearch                       " turn on incremental search
set mouse=a                         " enable the mouse at all times
set ttymouse=xterm2                 " enable the in tmux
set clipboard+=unnamed              " share clipboard

" ========== UI Customizations ==========
syntax on                           " turn on syntax highlighting
set showcmd                         " show (partial) command in status line
set guioptions+=                    " use horizontal scrollbar
set winminheight=0                  " min height of a split window
set hlsearch                        " enable search highlighting
set background=light                " sets the background color
set t_Co=256                        " set the terminal color to 256
set laststatus=2                    " show the status line

" scrolling options
set scrolloff=5                     " start scrolling a few lines away from margins
set sidescrolloff=15
set sidescroll=1

" bracket maching options
set showmatch
set mat=2

" ruler bar
set formatoptions+=roc
set ruler

" highlight color options
highlight Pmenu ctermbg=238 gui=bold
highlight LineNr term=bold cterm=NONE ctermfg=NONE ctermbg=DarkGrey  gui=NONE guifg=NONE guibg=DarkGrey
highlight Search ctermbg=DarkGrey
highlight Search ctermfg=green

" ========== Completion Options ==========
set wildmenu
set wildmode=list:longest,full

" stuff to ignore when doing tab completions
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*.swp*
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif

" ========== Persistent Undo ==========
" keep undo history across sessions

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undofile
set undodir=~/.vim/backups
set undolevels=1000

" ========== Turn off swap files ==========
set nobackup
set nowritebackup
set noswapfile

" ========== Folding ==========
set foldmethod=indent                   " fold based on indent
set foldlevel=100

" ========== Indentation ==========
set autoindent
set smartindent
set expandtab
set smarttab
set tabstop=4
set softtabstop=0
set shiftwidth=4

" ========== Auto Complete ==========

" enable java autocomplete (omnicomplete)
" Only do this part when compiled with support for autocommands.
if has("autocmd")
  autocmd Filetype java setlocal omnifunc=javacomplete#Complete
  inoremap <buffer> <C-X><C-U> <C-X><C-U><C-P>
  inoremap <buffer> <C-S-Space> <C-X><C-U><C-P>
endif

" ========== SuperTab ==========

" set tab to invoke the autocomplete menu
let g:SuperTabDefaultCompletionType = "context"

" make CR select the current entry and don't insert a new line
let g:SuperTabCrMapping=1

" when tab is hit, don't select the first entry, but insert the longest common text
" of all matches (longest), also always show the menu even if only one option (menuone)
set completeopt=longest,menuone

" ========== EasyMotion ==========
let g:EasyMotion_smartcase = 1 " turn on smart case

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" ========== FZF ==========

" Open files in horizontal split
nnoremap <silent> <Leader>s :call fzf#run({
            \   'down': '40%',
            \   'sink': 'botright split' })<CR>

" Open files in vertical horizontal split
nnoremap <silent> <Leader>v :call fzf#run({
            \   'right': winwidth('.') / 2,
            \   'sink':  'vertical botright split' })<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

" Fuzzy file finder
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~40%' }

" For Commits and BCommits to customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

let g:fzf_history_dir = '~/.local/share/fzf-history'

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nnoremap <silent> <C-t> :FZF<cr>

" ========== rip-grep =============

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
map <C-g> :Find<SPACE>

" ========== NERDTree =============

" Map Ctrl+N to open NerdTree
map <C-n> :NERDTreeToggle<CR>

" Open up NERDTree automatically if vim is started with no files specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close NERDTree if its the only window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" =========== Airline ==========

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Check for issues with whitespaces
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#trailing_regexp = '\s$'


" =========== Tabularize ==========

nnoremap <leader>a= :Tabularize /=<CR>
vnoremap <leader>a= :Tabularize /=<CR>
nnoremap <leader>a: :Tabularize /:\zs<CR>
vnoremap <leader>a: :Tabularize /:\zs<CR>

" ========== Mappings ==========

" Map a quick jj to get out of insert mode
imap jj <Esc>

" Search for highlighted text in visual mode by hitting //
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'

"map ctrl c to yank to the buffer
map <C-c> "*y<CR>
map <C-x> "*x<CR>

" F8 will auto indent the whole file
map <F8> mzgg=G`z<CR>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>q :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Switch to buffer quickly
nnoremap <leader>b :ls<cr>:b<space>

" ========== Functions ==========

" re-enable removal of whitespaces and tabs from a file
function! SetErase()
    augroup extraSpaceGroup
        autocmd BufWritePre * :%s/\s\+$//ge
        autocmd BufWritePre * :%s/\t/    /ge
    augroup END
endfunction

" disable removing whitespaces and tabs from a file
function! NoErase()
    augroup extraSpaceGroup
        autocmd BufWritePre * :%s/\s\+$//ge
        autocmd BufWritePre * :%s/\t/    /ge
    augroup END
    autocmd! extraSpaceGroup
endfunction

" Assign :SE and :NE to SetErase and NoErase respectively
command! -range -nargs=* SE <line1>,<line2> call SetErase()
command! -range -nargs=* NE <line1>,<line2> call NoErase()

" Map <leader>x to prettify selected xml
vnoremap <leader>x :s/>\s*</>\r</g<CR>

" Map <leader>j to prettify selected json
vnoremap <leader>j :!python -m json.tool<CR>

" ========== Special Customizations ==========

" don't insert comment automatically on new line
autocmd BufRead,BufNewFile * set formatoptions-=cro

" match ExtraWhitespace /\s\+$\|\t/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$\|\t/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$\|\t/

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" highlight trailing whitespaces and also tab characters
highlight ExtraWhitespace ctermbg=grey guibg=grey

" disable removal of whitespaces and tabs from the file (disable by calling :NE
" and reenable by calling :SE)
call NoErase()

" resize windows by default by 10 lines
nnoremap <silent> <Leader>= :exe "resize +5"<CR>
nnoremap <silent> <Leader>- :exe "resize -5"<CR>
nnoremap <silent> <Leader>[ :exe "vertical resize +5"<CR>
nnoremap <silent> <Leader>] :exe "vertical resize -5"<CR>
