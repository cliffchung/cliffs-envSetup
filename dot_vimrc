" use vim settings rather than vi
" This needs to be first because it changes other options as a side affect
set nocompatible

filetype off

" ========== Load plugins ==========
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'       " Plugin manager
Plugin 'ctrlp.vim'                  " Search for files within the directory
Plugin 'Syntastic'                  " Static code analysis to find bugs
Plugin 'easymotion/vim-easymotion'  " Easier key jump
Plugin 'Valloric/YouCompleteMe'     " Source completion
Plugin 'vim-airline/vim-airline'    " Nicer status line

call vundle#end()            " required

" Turn on vim's ability to recognize different types of files, and use custom
" highlighters and indentation for them
filetype plugin indent on    " required

" ========== General Config ==========

let spell_auto_type=""              " don't automatically spell check
set history=1000                    " set a command history
set hidden                          " allow for buffer to be hidden
set clipboard+=unnamed              " share clipboard
set visualbell                      " no sounds
set viminfo^=%                      " remember info about buffers on close
set nowrap                          " turn off word wrap by default (do "set wrap" to turn it on again, or remove this line)
set ignorecase                      " ignores casing by default
set smartcase                       " only respects casing when it's used in searching
set noequalalways                   " don't resize splits when a buffer is closed
set backspace=2                     " use nice backspacing
set incsearch                       " turn on incremental search
set mouse=a                         " enable the mouse at all times

" ========== UI Customizations ==========
syntax on                           " turn on syntax highlighting
set showcmd                         " show (partial) command in status line
set guioptions+=                    " use horizontal scrollbar
set winminheight=0                  " min height of a split window
set hlsearch                        " enable search highlighting
set background=light                " sets the background color
set t_Co=256                        " set the terminal color to 256
set number                          " add line numbers
set laststatus=2                    " show the status line

" scrolling options
set scrolloff=5                     " start scrolling a few lines away from margins
set sidescrolloff=15
set sidescroll=1

" bracket maching options
set showmatch
set mat=2

" ruler bar
set formatoptions+=roc
set ruler

" highlight color options
highlight Pmenu ctermbg=238 gui=bold
highlight LineNr term=bold cterm=NONE ctermfg=NONE ctermbg=DarkGrey  gui=NONE guifg=NONE guibg=DarkGrey

" ========== Completion Options ==========
set wildmenu
set wildmode=list:longest,full

" stuff to ignore when doing tab completions
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*.swp*
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif

" ========== Persistent Undo ==========
" keep undo history across sessions

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undofile
set undodir=~/.vim/backups
set undolevels=1000

" ========== Turn off swap files ==========
set nobackup
set nowritebackup
set noswapfile

" ========== Folding ==========
set foldmethod=indent                   " fold based on indent
set foldlevel=100

" ========== Indentation ==========
set autoindent
set smartindent
set expandtab
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" ========== Auto Complete ==========

" enable java autocomplete (omnicomplete)
" Only do this part when compiled with support for autocommands.
if has("autocmd")
    autocmd Filetype java setlocal omnifunc=javacomplete#Complete
    setlocal completefunc=javacomplete#CompleteParamsInfo
    " nicer autocomplete
    inoremap <buffer> <C-X><C-U> <C-X><C-U><C-P>
    inoremap <buffer> <C-S-Space> <C-X><C-U><C-P>
endif

" ========== Tags ==========
set tags=.tags;~/.vim/tags

" regenerate tags when F12 is pressed
nmap <F12> :!ctags -R -h java -f .tags ./src<CR>

" goto the next tag
nmap <C-n> :tnext<CR>

" ========== Mappings ==========

"map ctrl c to yank to the buffer
map <C-c> "*y<CR>
map <C-x> "*x<CR>

" set tab to invoke the autocomplete menu
let g:SuperTabDefaultCompletionType = "context"

" F7 will auto indent the whole file
map <F7> mzgg=G`z<CR>

" ========== Functions ==========

" re-enable removal of whitespaces and tabs from a file
function! SetErase()
    augroup extraSpaceGroup
        autocmd BufWritePre * :%s/\s\+$//ge
        autocmd BufWritePre * :%s/\t/    /ge
    augroup END
endfunction

" disable removing whitespaces and tabs from a file
function! NoErase()
    autocmd! extraSpaceGroup
endfunction

" Assign :SE and :NE to SetErase and NoErase respectively
command! -range -nargs=* SE <line1>,<line2> call SetErase()
command! -range -nargs=* NE <line1>,<line2> call NoErase()

" smooth scrolling
function SmoothScroll(up)
    if a:up
        let scrollaction="\<C-Y>"
    else
        let scrollaction="\<C-E>"
    endif
    exec "norm " . scrollaction
    redraw
    let counter=1
    while counter<&scroll
        let counter+=1
        sleep 10m
        redraw
        exec "norm " . scrollaction
    endwhile
endfunction
nnoremap <C-U> :call SmoothScroll(1)<Enter>
nnoremap <C-D> :call SmoothScroll(0)<Enter>
inoremap <C-U> <Esc>:call SmoothScroll(1)<Enter>i
inoremap <C-D> <Esc>:call SmoothScroll(0)<Enter>i

" Map \x to prettify single line xml
nnoremap \x :%s/>\s*</>\r</g<CR>

" ========== Syntastic ==========
" don't do a check on wq
let g:syntastic_check_on_wq = 0

" don't auto jump to the first issue when saving a file
let g:syntastic_auto_jump = 0

" Map \c to do a syntastic check
nnoremap \c :SyntasticCheck<CR>

" make syntastic run in passive mode
nnoremap \p :SyntasticToggleMode<CR>

" ========== EasyMotion ==========
let g:EasyMotion_smartcase = 1 " turn on smart case

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" ========== Special Customizations ==========

autocmd BufRead,BufNewFile * set formatoptions-=cro     " don't insert comment automatically on new line

" match ExtraWhitespace /\s\+$\|\t/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$\|\t/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$\|\t/

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" highlight trailing whitespaces and also tab characters
highlight ExtraWhitespace ctermbg=grey guibg=grey

" enable removal of whitespaces and tabs from the file (disable by calling :NE
" and reenable by calling :SE
call SetErase()
