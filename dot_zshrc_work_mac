######################################################
# zsh configs for current machine
######################################################

export PATH=${HOME}/.toolbox/bin:${HOME}/bin/android-sdk/platform-tools:${PATH}

##################
# Exports
##################
export BRAZIL_PLATFORM_OVERRIDE=RHEL5_64

####################
# Aliases
###################

alias bb="brazil-build"
alias bc="brazil-build clean && brazil-build"
alias bbx='brazil-build xcode-env'
alias bwsu="brazil ws --use -p"
alias bwsr="brazil ws --remove -p"
alias ssh="TERM=xterm ssh"
alias pr='cr'

alias cloud='ssh -Y cloud'
alias odin='ssh -2 -fNL 2009:127.0.0.1:2009 cloud'

alias sync='scp -r cloud:/home/ctschung/workspace/dylan/src/dylan-app/build/dylan_flashdownload build/'
alias bdr='brazil ws dryrun -p hark-app -p hw-rtl87xx -p fw-platform'

########################
# Functions
########################

tags() {
    ctags -R ${1}
}

dylan_cli() {
    uart ${1} 2000000
}

bruce_cli() {
    uart ${1} 115200
}

uart() {
    port=${1}
    baud_rate=${2}
    python3 -m serial.tools.miniterm --eol CR --raw ${port} ${baud_rate}
}

dylan_flashdownload() {
    python3 scripts/flash_dylan.py --action flash_device --port ${1}

  # Detailed option descriptions
  # -i    Use interactive prompt. Will also use interactive mode if no port is supplied.
  # --port <PORT>    Serial device to use. (COMx, /dev/ttyUSBx, /dev/tty.usbserial-xxxxxxx)
  # --action <ACTION>    Which action for the script to perform. Must be one of "flash_device", "erase_memory", "reboot_device", "dump_memory_contents", or "set_bt_mac_address". The script will only perform one action each time it's run, so if you want to flash a device and set the BT mac, you'll need to run the script twice, once with --action=flash_device and once with --action=set_bt_mac_address
  # --erase_partitions <PARTITION>    When the action is erase_memory, this argument specifies what area of memory to erase. Options are "bank1", "mutable_kvs", "biometrics", and "everything". Note that if you erase everything, you will lose your MAC address. This will default to erasing the bank 1 ota header if no argument is specified.
  # --bt_mac <BT_MAC>    When the action is set_bt_mac_address, this argument is needed to specify what the MAC should be set to. BT_MAC should be specified in the form XX:XX:XX:XX:XX:XX
  # --save_file <FILE>    When the action is dump_memory_contents, this argument specifies the file to save the flash dump binary to. This defaults to "dump.bin" in the current directory.
  # --flash_images <MANIFEST>    When the action is flash_device, this argument specifies which flash_manifest file to use. The options are "bank0" (default), "bank1", "dylan", "ott", "factory", "sip", and "capture". Most users should only need to use "bank0" (standard flash, same images as OTA). In the rare occasion that you need to flash the bootpatch or OCCD, you will need to use the "factory" option.
  # --flash_dsp <FLASH_DSP>
  #
  # When the action is flash_device, this argument specifies whether or not to flash the Intel DSP. The supplied value for the argument should be a boolean true or false.
  # --evt_migrate    If this option is supplied, the flashing process will include the necessary procedures to get a device from the EVT factory build to a current image.
  # --fsbl_2m    This option will force the script to start at 2M instead of 115200. This will only be needed for devices with the old FSBL and with firmware versions that cannot be identified by the script. If the FSBL version cannot be automatically ascertained the script will notify so the user can supply this option next time if necessary.
  # --hci    If this option is supplied, the script will call MPCLI with the -M1 option instead of M4. This is necessary when flashing the device after a full erase.
  # --reset_delay    If this option is supplied, the script will send a delayed wdt before calling MPCLI with the -M4 option. This is useful for flashing environments that previously needed to hold the button for a reset at every flash.
  # --factory_reset    If this option is supplied, the script will issue a factory reset and wait for it to finish after completing the rest of the flashing procedure. This will put the device into a fresh state with no BT pairing info, allowing it to go through OOBE.
}

dylan_manual_flash() {
    python3 mpcli_python/mpcli -aur -f flash_manifest.json -M4 -c ${1}
}
