" use vim settings rather than vi
" This needs to be first because it changes other options as a side affect
set nocompatible

filetype off

" ========== Load plugins ==========

call plug#begin('~/.vim/plugged')

" Nicer status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Fuzzy completion
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Add easier tmux navigation
Plug 'christoomey/vim-tmux-navigator'

" Run tmux commands within vim
Plug 'benmills/vimux'

" Make text align nicely
Plug 'godlygeek/tabular'

" Make paste work nicely and stop auto-indenting
Plug 'ConradIrwin/vim-bracketed-paste'

" Git tooling
Plug 'tpope/vim-fugitive'

" Color schemes
Plug 'rafi/awesome-vim-colorschemes'

"" Auto casing when search/replace
Plug 'tpope/vim-abolish'

" Kotlin highlighting
Plug 'udalov/kotlin-vim'

" " TypeScript highlighting
" Plug 'leafgarland/typescript-vim'

" Syntax highlighting for wiki
Plug 'chikamichi/mediawiki.vim'

" Syntax highlighting for yaml
Plug 'avakhov/vim-yaml'

" Display tags in a window
Plug 'majutsushi/tagbar'

" Xcode color scheme
Plug 'nickaroot/vim-xcode-dark-theme'

" " YouCompleteMe
" Plug 'ycm-core/YouCompleteMe'

" For auto completion
Plug 'prabirshrestha/vim-lsp'
Plug 'neoclide/coc.nvim'
Plug 'clangd/coc-clangd'

" Add plugins to &runtimepath
call plug#end()

" Turn on vim's ability to recognize different types of files, and use custom
" highlighters and indentation for them
filetype plugin indent on

" ========== General Config ==========

let spell_auto_type=""              " don't automatically spell check
let mapleader=','                   " change the leader key to be ,
set history=1000                    " set a command history
set hidden                          " allow for buffer to be hidden
set visualbell                      " no sounds
set nowrap                          " turn off word wrap by default (do "set wrap" to turn it on again, or remove this line)
set ignorecase                      " ignores casing by default
set smartcase                       " only respects casing when it's used in searching
set noequalalways                   " don't resize splits when a buffer is closed
set backspace=2                     " use nice backspacing
set incsearch                       " turn on incremental search
set mouse=a                         " enable the mouse at all times
set clipboard+=unnamed              " share clipboard
set fileformat=unix                 " unix file format

" ========== UI Customizations ==========
syntax on                           " turn on syntax highlighting
set showcmd                         " show (partial) command in status line
set guioptions+=                    " use horizontal scrollbar
set winminheight=0                  " min height of a split window
set hlsearch                        " enable search highlighting
set t_Co=256                        " set the terminal color to 256
set laststatus=2                    " show the status line
set colorcolumn=120                 " show a vertical column to indicate line limit
set number                          " shows current line number

" color scheme
set background=dark
" colorscheme xcode_dark
colorscheme gruvbox
" let ayucolor="dark"
" colorscheme ayu
" colorscheme carbonized-dark
" colorscheme focuspoint
" colorscheme papercolor
" colorscheme minimalist
" colorscheme sierra
" colorscheme tender

" scrolling options
set scrolloff=5                     " start scrolling a few lines away from margins
set sidescrolloff=15
set sidescroll=1

" bracket maching options
set showmatch
set mat=2

" ruler bar
set formatoptions+=roc
set ruler

" ========== Completion Options ==========
set wildmenu
set wildmode=list:longest,full

" stuff to ignore when doing tab completions
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*.swp*
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif

" ========== Persistent Undo ==========
" keep undo history across sessions

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undofile
set undodir=~/.vim/backups
set undolevels=1000

" ========== Turn off swap files ==========
set nobackup
set nowritebackup
set noswapfile

" ========== Folding ==========
set foldmethod=indent                   " fold based on indent
set foldlevel=100

" ========== Indentation ==========
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" =========== Fugitive ===========

" Make diffs use vertical splits
set diffopt+=vertical
" auto diffupdate when diffput/diffget used
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" ========== FZF ==========

" Open files in horizontal split
nnoremap <silent> <Leader>s :call fzf#run({
            \   'down': '40%',
            \   'sink': 'botright split' })<CR>

" Open files in vertical horizontal split
nnoremap <silent> <Leader>v :call fzf#run({
            \   'right': winwidth('.') / 2,
            \   'sink':  'vertical botright split' })<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

" Fuzzy file finder
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~40%' }

" For Commits and BCommits to customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

let g:fzf_history_dir = '~/.local/share/fzf-history'

nnoremap <silent> <C-t> :FZF<cr>

" ========== rip-grep =============

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-file .gitignore --ignore-file ~/.gitignore --ignore-file ~/.gitignore_global --ignore-case --hidden --follow --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
map <C-g> :Find<SPACE><C-r><C-w><CR>

" =========== Airline ==========

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Check for issues with whitespaces
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#trailing_regexp = '\s$'

" UI customizations
let g:airline_powerline_fonts = 1
let g:airline_solarized_bg='dark'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Set font when GUI is running
if has ("gui_running") && !has('nvim')
    set guifont=Inconsolata\ for\ Powerline:h14
endif

" =========== Tabularize ==========

nnoremap <leader>a= :Tabularize /=<CR>
vnoremap <leader>a= :Tabularize /=<CR>
nnoremap <leader>a: :Tabularize /:\zs<CR>
vnoremap <leader>a: :Tabularize /:\zs<CR>

" =========== Tagbar ============
nmap <leader>t :TagbarToggle<cr>

" =========== CoC =============

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>i :CocCommand clangd.switchSourceHeader<CR>
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" cursor hover time until the dialog pops up
set updatetime=300

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" ========== Mappings ==========

" Map a quick jj to get out of insert mode
imap jj <Esc>

" Search for highlighted text in visual mode by hitting //
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'

"map ctrl c to yank to the buffer
map <C-c> "*y<CR>
map <C-x> "*x<CR>

" F8 will auto indent the whole file
map <F8> mzgg=G`z<CR>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>q :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Switch to buffer quickly
nnoremap <leader>b :ls<cr>:b<space>

" resize windows by default by 10 lines
nnoremap <silent> <Leader>= :exe "resize +5"<CR>
nnoremap <silent> <Leader>- :exe "resize -5"<CR>
nnoremap <silent> <Leader>[ :exe "vertical resize +5"<CR>
nnoremap <silent> <Leader>] :exe "vertical resize -5"<CR>

" Toggle fullscreen window
nnoremap <C-W>o :call MaximizeToggle()<CR>

" Map <leader>x to prettify selected xml
vnoremap <leader>x :s/>\s*</>\r</g<CR>

" Map <leader>j to prettify selected json
vnoremap <leader>j :!python -m json.tool<CR>

" ========== Functions ==========

" re-enable removal of whitespaces and tabs from a file
function! SetErase()
    augroup extraSpaceGroup
        autocmd BufWritePre * :%s/\s\+$//ge
        autocmd BufWritePre * :%s/\t/    /ge
    augroup END
endfunction

" disable removing whitespaces and tabs from a file
function! NoErase()
    augroup extraSpaceGroup
        autocmd BufWritePre * :%s/\s\+$//ge
        autocmd BufWritePre * :%s/\t/    /ge
    augroup END
    autocmd! extraSpaceGroup
endfunction

" Assign :SE and :NE to SetErase and NoErase respectively
command! -range -nargs=* SE <line1>,<line2> call SetErase()
command! -range -nargs=* NE <line1>,<line2> call NoErase()

" disable removal of whitespaces and tabs from the file (disable by calling :NE
" and reenable by calling :SE)
call NoErase()

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" ========== Special Customizations ==========

" don't insert comment automatically on new line
autocmd BufRead,BufNewFile * set formatoptions-=cro

" match ExtraWhitespace /\s\+$\|\t/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$\|\t/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$\|\t/

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" highlight trailing whitespaces and also tab characters
highlight ExtraWhitespace ctermbg=grey guibg=grey

" Use typescript formatting for tsx files
augroup SyntaxSettings
    autocmd!
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript
augroup END

" ================ Hex mode =====================
" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    silent :e " this will reload the file without trickeries
              "(DOS line endings will be shown entirely )
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

